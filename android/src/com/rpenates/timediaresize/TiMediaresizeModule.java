/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.rpenates.timediaresize;

import java.util.StringTokenizer;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollObject;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;

import android.graphics.Bitmap;

import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import pyxis.uzuki.live.mediaresizer.MediaResizer;
import pyxis.uzuki.live.mediaresizer.MediaResizerGlobal;
import pyxis.uzuki.live.mediaresizer.data.ResizeOption;
import pyxis.uzuki.live.mediaresizer.data.VideoResizeOption;
import pyxis.uzuki.live.mediaresizer.model.MediaType;
import pyxis.uzuki.live.mediaresizer.model.ScanRequest;
import pyxis.uzuki.live.mediaresizer.model.VideoResolutionType;


@Kroll.module(name="TiMediaresize", id="com.rpenates.timediaresize")
public class TiMediaresizeModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "TiMediaresizeModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public TiMediaresizeModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
		MediaResizerGlobal.INSTANCE.initializeApplication(app);
	}

	@Kroll.method
	public void resizeImage(KrollDict options) {
		if (options != null) {

			// Builder variables
			int resWidth = 0;
			int resheight = 0;
			int quality = 0;
			Boolean bitmapFilter = false;

			ImageResizeOption imageOptions;
			ResizeOption resizeOptions;
			if (options.containsKey("resolution")){
				String resolutionString = options.getString("resolution");
				String[] resolutionArray = resolutionString.split("x");
				resWidth = Integer.parseInt(resolutionArray[0]);
				resheight = Integer.parseInt(resolutionArray[1]);
				String originPath = "";
				String destinationPath = "";
			}

			if (options.containsKey("quality")){
				quality = options.getInt("quality");
			}

			imageOptions = new ImageResizeOption.Builder()
				.setImageprocessMode(ImageMode.ResizeAndCompress)
				.setImageResolution(resWidth, resheight)
				.setBitmapFilter(bitmapFilter)
				.setCompressFormat(Bitmap.CompressFormat.JPEG)
				.setCompressQuality(quality)
				.setScanRequest(ScanRequest.TRUE)
				.build();

			resizeOptions = new ResizeOption.Builder()
				.setMediaType(MediaType.IMAGE)
				.setImageResizeOption(imageOptions)
				.setTargetPath(destinationPath)
				.setOutputPath(imageFile.getAbsolutePath())
				.setCallback(new F2() {
					@Override
					public void invoke (Object code, Object output ){
						// if (options.containsKey("callback")){
						// 	KrollFunction callback = options.getKrollObject("callback");
						// 	KrollObject result;
						// 	callback.call(result, options); // define payload
						// }
						Log.d(LCAT, "onInvoke execution");
					}
				}).build();
				
			MediaResizer.process(resizeOptions);

		} else {
			Log.e(LCAT, "No available options, skipping...");
		}
	}

	@Kroll.method
	public void resizeVideo(KrollDict options) {
		if (options != null) {

			// Builder variables
			int resWidth = 640;
			int resheight = 480;
			int quality = 0;
			Boolean bitmapFilter = false;

			VideoResizeOption videoOptions;
			ResizeOption resizeOptions;
			if (options.containsKey("resolution")){
				String resolutionString = options.getString("resolution");
				String[] resolutionArray = resolutionString.split("x");
				resWidth = Integer.parseInt(resolutionArray[0]);
				resheight = Integer.parseInt(resolutionArray[1]);
				String originPath = "";
				String destinationPath = "";
			}

			if (options.containsKey("quality")){
				quality = options.getInt("quality");
			}

			videoOptions = new VideoResizeOption.Builder()
                .setVideoResolutionType(VideoResolutionType.AS480)
                .setVideoBitrate(1000 * 1000)
                .setAudioBitrate(128 * 1000)
                .setAudioChannel(1)
                .setScanRequest(ScanRequest.TRUE)
                .build();

			resizeOptions = new ResizeOption.Builder()
				.setMediaType(MediaType.VIDEO)
				.setVideoResizeOption(resizeOption)
				.setTargetPath(path)
				.setOutputPath(imageFile.getAbsolutePath())
				.setCallback(new F3() {
					@Override
					public void invoke (Object code, Object path, Object output ){
						// if (options.containsKey("callback")){
						// 	KrollFunction callback = options.getKrollObject("callback");
						// 	KrollObject result;
						// 	callback.call(result, options); // define payload
						// }
						Log.d(LCAT, "onInvoke execution");
					}
				}).build();
				
			MediaResizer.process(resizeOptions);

		} else {
			Log.e(LCAT, "No available options, skipping...");
		}
	}

}

